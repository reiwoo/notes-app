#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
import subprocess
import sys
import os
import requests

def is_server_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä"""
    try:
        response = requests.get("http://localhost:5000/", timeout=2)
        return response.status_code == 200
    except:
        return False

def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    print("=" * 50)
    
    # 1. –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã (–¥–æ–ª–∂–Ω—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—Ç—å)
    print("1. –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    result_basic = subprocess.run([
        sys.executable, '-m', 'pytest', 
        'tests/test_basic.py',
        '-v',
        '--tb=short'
    ], capture_output=False)
    
    if result_basic.returncode != 0:
        print("‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return result_basic.returncode
    
    print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    if not is_server_running():
        print("\n‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("   python app.py")
        print("\nüìã –ó–∞–ø—É—Å–∫–∞—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã...")
        return result_basic.returncode
    
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –∂–∏–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
    print("\n2. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –∂–∏–≤—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º...")
    result_live = subprocess.run([
        sys.executable, '-m', 'pytest', 
        'tests/test_simple_live.py',
        '-v',
        '--tb=short'
    ], capture_output=False)
    
    print("=" * 50)
    
    if result_live.returncode == 0:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    return result_live.returncode

if __name__ == '__main__':
    exit_code = run_tests()
    sys.exit(exit_code)